{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst quoteSlice = createSlice({\n  name: \"quotes\",\n  initialState: {\n    quotesList: [],\n    singleQuote: {}\n  },\n  reducers: {\n    replaceList(state, action) {\n      state.quotesList = action.payload.list;\n    },\n\n    onlyquote(state, action) {\n      state.singleQuote = {\n        id: action.payload.id,\n        text: action.payload.text,\n        author: action.payload.author\n      };\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    quoteReducer: quoteSlice.reducer\n  }\n});\nexport const fetchingfromDataBase = () => {\n  return async dispatch => {\n    const fetchingData = async () => {\n      const response = await fetch(\"https://webapp-e180b-default-rtdb.firebaseio.com/quotes.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchingData();\n      const list = [];\n\n      for (const key in cartData) {\n        list.push({\n          id: key,\n          author: cartData[key].author,\n          text: cartData[key].text\n        });\n      }\n\n      dispatch(quotesActions.replaceList({\n        list: list || []\n      }));\n    } catch (error) {\n      console.log(error); // dispatch(cartActions.showRequestStatus({\n      //     status:'success',\n      //     message:\"Data fetched \",\n      //     title:\"Successfully fetch the data\"\n    }\n  };\n};\nexport const fetchingSingleQuote = id => {\n  return async dispatch => {\n    const singleQuote = async () => {\n      const response = await fetch(`https://webapp-e180b-default-rtdb.firebaseio.com/quotes/${id}.json`);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const dataget = await singleQuote();\n      quotesActions.onlyquote({\n        id: id,\n        text: dataget.text,\n        author: dataget.author\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const quotesActions = quoteSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/Users/amans/OneDrive/Desktop/react_router/routing-in-react/src/components/pages/store/index.js"],"names":["createSlice","configureStore","quoteSlice","name","initialState","quotesList","singleQuote","reducers","replaceList","state","action","payload","list","onlyquote","id","text","author","store","reducer","quoteReducer","fetchingfromDataBase","dispatch","fetchingData","response","fetch","ok","Error","data","json","cartData","key","push","quotesActions","error","console","log","fetchingSingleQuote","dataget","err","actions"],"mappings":"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","sourcesContent":["import {createSlice,configureStore} from '@reduxjs/toolkit'\r\n\r\n\r\nconst quoteSlice = createSlice({\r\n    name:\"quotes\",\r\n    initialState:{quotesList:[],singleQuote:{}},\r\n    reducers:{\r\n        replaceList(state,action){\r\n            state.quotesList = action.payload.list\r\n        },\r\n        onlyquote(state,action){\r\n            state.singleQuote ={\r\n                id:action.payload.id,\r\n                text:action.payload.text,\r\n                author:action.payload.author\r\n\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer:{quoteReducer:quoteSlice.reducer}\r\n})\r\n\r\nexport const fetchingfromDataBase = ()=>{\r\n    return async (dispatch)=>{\r\n        const fetchingData  = async()=>{\r\n            const response = await fetch(\"https://webapp-e180b-default-rtdb.firebaseio.com/quotes.json\")\r\n            if(!response.ok){\r\n                throw new Error (\"Something went wrong!\")\r\n            }\r\n            const data = await response.json()\r\n        \r\n            return data;\r\n\r\n        }\r\n        try{\r\n            const cartData = await fetchingData()\r\n            const list = [];\r\n            for (const key in cartData){\r\n                list.push({\r\n                    id:key,\r\n                    author:cartData[key].author,\r\n                    text:cartData[key].text\r\n           })\r\n\r\n            }\r\n            dispatch(quotesActions.replaceList({\r\n                list:list || [],\r\n\r\n            }))\r\n            \r\n\r\n        }catch(error){\r\n            console.log(error)\r\n            // dispatch(cartActions.showRequestStatus({\r\n            //     status:'success',\r\n            //     message:\"Data fetched \",\r\n            //     title:\"Successfully fetch the data\"\r\n            }\r\n        }\r\n\r\n    }\r\nexport const fetchingSingleQuote =(id)=>{\r\n    return async(dispatch)=>{\r\n        const singleQuote = async()=>{\r\n            const response = await fetch(`https://webapp-e180b-default-rtdb.firebaseio.com/quotes/${id}.json`)\r\n            if(!response.ok){\r\n                throw new Error (\"Something went wrong!\")\r\n            }\r\n            const data = await response.json()\r\n            return data;\r\n\r\n        }\r\n        try{\r\n            const dataget = await singleQuote()\r\n            quotesActions.onlyquote({\r\n                id:id,\r\n                text:dataget.text,\r\n                author:dataget.author\r\n            })\r\n\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const quotesActions = quoteSlice.actions\r\n\r\nexport default store\r\n"]},"metadata":{},"sourceType":"module"}